package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"errors"
	"gqlgen-go/graph/model"
	"gqlgen-go/internal"
	"strings"
)

// AddProjectV2ItemByID is the resolver for the addProjectV2ItemById field.
func (r *mutationResolver) AddProjectV2ItemByID(ctx context.Context, input model.AddProjectV2ItemByIDInput) (*model.AddProjectV2ItemByIDPayload, error) {
	nElems := strings.SplitN(input.ContentID, "_", 2)
	nType, _ := nElems[0], nElems[1]

	switch nType {
	case "ISSUE":
		item, err := r.Srv.AddIssueInProjectV2(ctx, input.ProjectID, input.ContentID)
		if err != nil {
			return nil, err
		}
		return &model.AddProjectV2ItemByIDPayload{
			Item: item,
		}, nil
	// case "PR":
	// 	item, err := r.Srv.AddPullRequestInProjectV2(ctx, input.ProjectID, input.ContentID)
	// 	if err != nil {
	// 		return nil, err
	// 	}
	// 	return &model.AddProjectV2ItemByIDPayload{
	// 		Item: item,
	// 	}, nil
	default:
		return nil, errors.New("invalid content id")
	}
}

// Repository is the resolver for the repository field.
func (r *queryResolver) Repository(ctx context.Context, name string, owner string) (*model.Repository, error) {
	return r.Srv.GetRepoByFullName(ctx, name, owner)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, name string) (*model.User, error) {
	return r.Srv.GetUserByName(ctx, name)
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (model.Node, error) {
	nElems := strings.SplitN(id, "_", 2)
	nType, _ := nElems[0], nElems[1]

	switch nType {
	// case "U":
	// 	return r.Srv.GetUserByID(ctx, id)
	// case "REPO":
	// 	return r.Srv.GetRepoByID(ctx, id)
	// case "ISSUE":
	// 	return r.Srv.GetIssueByID(ctx, id)
	// case "PJ":
	// 	return r.Srv.GetProjectByID(ctx, id)
	// case "PR":
	// 	return r.Srv.GetPullRequestByID(ctx, id)
	default:
		return nil, errors.New("invalid ID")
	}
}

// Mutation returns internal.MutationResolver implementation.
func (r *Resolver) Mutation() internal.MutationResolver { return &mutationResolver{r} }

// Query returns internal.QueryResolver implementation.
func (r *Resolver) Query() internal.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
